{
  "compiler": {
    "version": "0.6.12+commit.27d51765"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "signer",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "digest",
            "type": "bytes32"
          },
          {
            "internalType": "bytes",
            "name": "signature",
            "type": "bytes"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "isValidSignatureNow",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ]
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "isValidSignatureNow(address,bytes32,bytes)": {
          "details": "Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECRecover.recover`.",
          "params": {
            "digest": "Keccak-256 hash digest of the signed message",
            "signature": "Signature byte array associated with hash",
            "signer": "Address of the claimed signer"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {},
      "version": 1
    }
  },
  "settings": {
    "remappings": [
      "@ensdomains/=node_modules/@ensdomains/",
      "@openzeppelin/=node_modules/@openzeppelin/",
      "@solidity-parser/=node_modules/prettier-plugin-solidity/node_modules/@solidity-parser/",
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "eth-gas-reporter/=node_modules/eth-gas-reporter/",
      "forge-std/=lib/forge-std/src/",
      "hardhat/=node_modules/hardhat/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 10000000
    },
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "compilationTarget": {
      "contracts/util/SignatureChecker.sol": "SignatureChecker"
    },
    "evmVersion": "istanbul",
    "libraries": {}
  },
  "sources": {
    "contracts/interface/IERC1271.sol": {
      "keccak256": "0x8accb9f93dcd398e5c84cb80010de808cf5092cebfa823b3d7c4b8e5b2bcf672",
      "urls": [
        "bzz-raw://5b695059d7f0ba51bf58a3713683a892051078fdaabf37bbb8673614542b3267",
        "dweb:/ipfs/QmRQoDkk2serLRyjnKFD2ynXnu8b4JyAix9DnBcwkdyL9n"
      ],
      "license": "Apache-2.0"
    },
    "contracts/util/ECRecover.sol": {
      "keccak256": "0xedf59af6c5998f9e4b0791cd79122a759a1d80a38453053df77838914dd1294d",
      "urls": [
        "bzz-raw://318c71b3f57477e7178b1a9eef86176ead3876bc7e2c196c312b07e6e79dd8f0",
        "dweb:/ipfs/Qmer6yrZ39T1XWRtwCgz6DJE1ojT2eRKihsFfZJHzfErFk"
      ],
      "license": "Apache-2.0"
    },
    "contracts/util/SignatureChecker.sol": {
      "keccak256": "0x89181a5d7440ce21492c5023ab98357c76e3de81ffc376dfda3983997a70728a",
      "urls": [
        "bzz-raw://8a9e3c2176362b727900c001dd6625fb2c12773475effdb4e24ff44ce56654e3",
        "dweb:/ipfs/QmNsdopHx3ZN7iANvTVJ1wH49MogQEgsUqBBD44USqUQS9"
      ],
      "license": "Apache-2.0"
    }
  },
  "version": 1
}